import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiohttp import ClientSession

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
import os
TOKEN = os.getenv("TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (aiogram 3.x)
bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø GeoFinderBot.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π –∞–¥—Ä–µ—Å, –∏ —è –≤–µ—Ä–Ω—É —Ç–µ–±–µ –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É)."
    )

@dp.message()
async def handle_address(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∞–¥—Ä–µ—Å,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Nominatim –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
    """
    address = message.text.strip()
    if not address:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–µ–ø—É—Å—Ç–æ–π –∞–¥—Ä–µ—Å.")
        return

    url = "https://nominatim.openstreetmap.org/search"
    params = {
        "q": address,
        "format": "json",
        "limit": 1
    }
    headers = {
        # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π email –≤ User-Agent —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ Nominatim
        "User-Agent": "GeoFinderBot/1.0 (your_email@example.com)"
    }

    try:
        async with ClientSession() as session:
            async with session.get(url, params=params, headers=headers) as resp:
                if resp.status != 200:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.")
                    return

                data = await resp.json()
                if not data:
                    await message.answer("üîç –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                    return

                lat = data[0].get("lat")
                lon = data[0].get("lon")
                display_name = data[0].get("display_name", address)

                osm_link = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=18/{lat}/{lon}"
                await message.answer(
                    f"üìç –ù–∞–π–¥–µ–Ω–æ: {display_name}\n"
                    f"–®–∏—Ä–æ—Ç–∞: `{lat}`\n"
                    f"–î–æ–ª–≥–æ—Ç–∞: `{lon}`\n"
                    f"[–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({osm_link})",
                    parse_mode="Markdown"
                )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å (polling) –±–æ—Ç–∞.
    """
    print("ü§ñ Bot is running...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())